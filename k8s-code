pod.yaml

---
apiVersion: v1
kind: Pod
metadata:
  name: demo-pod
  labels:
    app: demo
spec:
  containers:
  - name: demo-container1
    image: busybox
    command: ['sh', '-c', 'echo Hello World! && sleep 300']
  - name: demo-container2
    image: centos
    command: ['sh', '-c', 'tail -f /dev/null']






















ReplicaSet.yaml

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-rs
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-rs
  template:
    metadata:
      labels:
        app: my-rs
    spec:
      containers: 
      - name: rs
        image: nginx













deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80



1.21.3







kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.21.3 --record


kubectl rollout status deployment.v1.apps/nginx-deployment


kubectl get deployment


kubectl describe deployment | grep Image



Rollback a Deployment


kubectl rollout undo deployment.v1.apps/nginx-deployment

kubectl get deployment

kubectl describe deployment | grep Image





*************************


ClusterIP Service


deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80


kubectl create -f deployment.yaml


clusterip.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80







kubectl create -f clusterip.yaml

kubectl get pods -o wide | awk {'print $1" " $3 " " $6'} | column -t


kubectl describe service my-service


kubectl run my-test --rm -i --tty --image ubuntu -- bash

apt-get update && apt-get install

curl myservice






NodePort Service



nodeport.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


kubectl delete service myservice
kubectl create -f nodeport.yaml



kubectl get service/myservice


The Service type is a NodePort. Notice that a ClusterIP is also created automatically which takes the route from the NodePort.

The NodePort Service is exposed externally on the available worker nodes at port 32009.



kubectl get nodes -o wide |  awk {'print $1" " $2 " " $7'} | column -t

on SG open TCP ---> 30000 to 65535


curl --silent 34.214.98.130:32009  | grep title



LoadBalancer Service

loadbalancer.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


kubectl delete service myservice
kubectl create -f loadbalancer.yaml


kubectl get service/myservice |  awk {'print $1" " $2 " " $4 " " $5'} | column -t


curl -silent adb010d2006b511e99d7702abbb5e7b9-679524454.us-west-2.elb.amazonaws.com:80 | grep title


